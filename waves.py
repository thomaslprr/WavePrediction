# -*- coding: utf-8 -*-
"""waves.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5ExnQihsPfxE9a8K_7VKVpSgKq4whTc

#Import
"""

#import des librairies
import pandas as pd
import seaborn as sns
import numpy as np
import time
import datetime
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima_model import ARIMA
import matplotlib.pyplot as plt # plotting
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
from pandas import DataFrame
from math import sqrt
from sklearn.metrics import mean_squared_error

"""#Création du jeu de données"""

#étape de prédiction (t+(7x30minutes))
t_step = 7

nb_lignes = 20000
nb_donnees_test = 200

#modification dimensions graphiques
sns.set(rc = {'figure.figsize':(15,8)})
WAVE_PATH = "/content/wave.csv"
#import csv
datas = pd.read_csv(WAVE_PATH,parse_dates=True,index_col=0,nrows=nb_lignes) 
#on remplace les valeurs absurdes par des valeurs nulles
datas.replace(-99.90, np.nan, inplace=True)
#interpolation des données manquantes
datas = datas.interpolate(limit_direction='both')
datas.index = pd.to_datetime(datas.index).to_period('15T')
#renommage des colonnes
datas = datas.rename(columns={'Peak Direction': 'Peak_Direction'})
datas = datas.rename(columns={'SST': 'Temperature'})
datas = datas.rename(columns={'Tz': 'Period'})

"""#Analyse des données"""

datas.describe()

print(datas.head())
print(datas.shape)
print(datas.columns)

datas

sns.displot(datas["Hs"])

sns.displot(datas["Hmax"])

sns.displot(datas["Period"])

sns.displot(datas["Tp"])

sns.displot(datas["Peak_Direction"])

sns.displot(datas["Temperature"])

sns.heatmap(datas.corr(),annot=True)

#remove noise
rolling =  datas.rolling(window=100).mean()
rolling.dropna(inplace=True)
sns.lineplot(data=rolling,x=rolling.index.to_timestamp(),y="Hs")

"""#Apprentissage par machine

## Paramètres ARIMA
"""

train=datas.iloc[:-nb_donnees_test,0]
test=datas.iloc[-nb_donnees_test:,0]
print(train.shape,test.shape)

#Is it stationnary ? 
result=adfuller(train)
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
result_diff = adfuller(train.diff().dropna())
print('ADF Statistic: %f' % result_diff[0])
print('p-value: %f' % result_diff[1])
#if p-value <= 0.05 : NO

#p ?
x=plot_pacf((train.diff()).dropna(),lags=10)

#q ?
x=plot_acf((train.diff()).dropna(),lags=10)

"""## Résumé du modèle"""

model = ARIMA(train, order=(1,0,1))
model_fit = model.fit()
# summary of fit model
print(model_fit.summary())

"""## Modèle 1-step

### Entraînement du modèle 1-step
"""

history = [x for x in train]
predictions = list()
# walk-forward validation
for t in range(len(test)):
	model = ARIMA(history, order=(1,0,1))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))

"""### Evaluation du modèle 1-step"""

# evaluate forecasts
rmse = sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % rmse)

# plot forecasts against actual outcomes
plt.plot(test.values,label="Real value")
plt.plot(predictions,color='red',label="Prediction")
plt.legend(loc="upper right")
plt.title("1-step Predicition vs Real Value",
          fontsize=30)
plt.show()

"""## Modèle k-step

### Entraînement du modèle k-step
"""

history2 = [x for x in train]
predictions2 = list()
comparaison  = list()
# walk-forward validation
for t in range(len(test)-(t_step-1)):
	model = ARIMA(history2, order=(1,0,1))
	model_fit = model.fit()
	output = model_fit.forecast(steps=t_step)
	yhat = output[0][-1]
	predictions2.append(yhat)
	obs = test[t+(t_step-1)]
	comparaison.append(obs)
	history2.append(test[t])
	print('predicted=%f, expected=%f' % (yhat, obs))

"""### Evaluation du modèle k-step"""

# evaluate forecasts
rmse = sqrt(mean_squared_error(predictions2,comparaison))
print('Test RMSE: %.3f' % rmse)

# plot forecasts against actual outcomes
plt.plot(comparaison,label="Real value")
plt.plot(predictions2,color='red',label="Prediction")
plt.legend(loc="upper right")
plt.title(str(t_step)+"-step Predicition vs Real Value",
          fontsize=30)
plt.show()